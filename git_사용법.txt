● 로컬에서 git사용


1. 디렉토리를 하나 만들고 해당 디렉토리로 이동한다.
	
	$> mkdir 'dir-name'
	$> cd dir-name

2. 이동한 위치에서 git 저장소를 초기화한다.

	$> git init

3. 현재 repository의 상태를 점검한다.

	$> git status

4. 파일을 만들면 아래의 순서로 add(업데이트 리스트에 포함)하고 commit(업데이트)한다.

	$> vim new_file.py
	$> git add new_file.py
	$> git commit new_file.py
	※ commit 명령 실행 후 에디터 화면이 뜨는데, commit 메시지를 입력하는 화면이다. 메시지(코멘트)를 입력하고 저장 후 나오면된다.

5. branch를 만들어서 서로 다른 버전의 관리가 가능하다.

	$> git branch			→	branch 목록을 본다.
	$> git branch hotfix		→ 	'hotfix'라는 이름의 브랜치를 만든다.
	$> git checkout hotfix		→	'hotfix'브랜치로 이동한다.
	$> git checkout master		→	마스터 브랜치로 이동한다.

6. branch의 병합이 가능하다.

	$> git merge hotfix		→	마스터를 기준으로 'hotfix' 브랜치를 합친다.
	※ 브랜치 병합은 현재 checkout되어 있는 위치가 기준이 된다. 일반적으로 마스터의 위치에서 브랜치를 합치기 때문에 현재 위치가 어디인지 확인할 필요가 있다.


7. branch 병합 중 branch들 간 충돌

	만약 서로다른 브랜치의 같은 이름의 파일의 동일한 행의 내용이 다르다면 merge하면서 충돌(conflict)이 발생한다.
	이 경우에는 내용을 알고 있는 사용자(user)가 직접 충돌내용을 수정해야 한다.

	$> cat hello_world.py
	print('Hello, world')
	print('Tell about your world')
	<<<<<<< HEAD
	print('Be your world')
	=======
	print('Go your way')
	>>>>>>> hotfix

	만약 mater에서 hotfix를 merge하다 충돌이 났다면 위와 같이 '======'을 기준으로 HEAD가 mater가 되고, 그 아래는 hotfix branch가 된다.
	아래와 같이 수정하고 다시 $> git add <file name> → $> git commit을 해서 충돌을 푼다.

8. git log의 확인
	$> git log -p			→	각 commit에 적용된 실제 변경 내용을 보여준다.
	$> git log --graph		→	branch의 분기와 병합을 그래프형태로 보여준다.


● 원격저장소 github의 사용


1. repository(저장소)의 생성

	github의 아이콘(손을 흔드는 고양이 모양)을 클릭하고 랜딩 페이지로 이동하면 'start a project'를 선택하거나 'New repository'를 선택한다.
	몇 가지 옵션을 선택하고 repository를 생성한다.
	
	옵션 중 'Initialize this repository with a README'는 github에서 생성한 원격 저장소를 바로 로컬 저장소로 복사해서 가져올 수 있다. 
	더불어 저장소 이름과 'Description'항목의 내용을 담은 README.md 파일을 생성해 준다.

2. fork

	다른 사람의 원격 저장소를 내 저장소로 복사한다.

3. pull request

	fork한 저장소를 수정해 다시 원본 저장소와 합쳐달라는(merge) 요청을 보낸다. '당겨가(pull) 달라는(request)'의미로 생각하면 이해하기 쉽다.

4. issue

	저장소 안에서 사용자들 사이의 문제를 논의하는 게시판과 같은 기능을 한다.

5. wiki

	저장소와 관련된 체계적인 기록을 남긴다.

6. pulse

	해당 원격 저장소의 최근 변경 내역을 확인할 수 있다. 최대 한달까지의 변경 내역을 확인할 수 있으며, pull request중 몇 개가 받아들여졌나,
	이슈는 몇 개가 있고 또 몇 개가 해결되었나 등을 확인할 수 있다.

7. graph

	활동 내역을 그래프로 시각화해서 보여준다.



● git을 이용한 로컬 저장소와 원격 저장소의 연동


1. git clone: 원격 저장소의 내용을 로컬 저장소로 가져온다.

	'Clone or download' → 'Clone with HTTPS'의 URL을 통해 원격 저장소의 내용을 내 저장소로 가져올 수 있다.

	$> mkdir <new_dir>
	$> cd <new_dir>
	$> git clone <URL>
	$> cd <clone한 저장소 이름>
	$> 'git status'로 상태를 확인해 본다.


2. git remote: 로컬저장소를 빈 원격 저장소와 연결한다.

	$> git remote add <별칭> <원격저장소 URL>
	예) git remote add hub https://github.com/sg-kim/tf_project.git

3. git push: 로컬 작업내용을 원격저장소에 올리기

	$> git push hub --all

	★ 원격 저장소의 내용과 내 로컬 저장소의 내용이 다르면 push가 되지 않는다. 이 때는 'git fetch'를 통해 원격과 로컬의 커밋을 맞춰주어야한다.
	※ git branch -a 명령을 이용하면 원격과 로컬의 모든 브랜치를 볼 수 있다.

	$> git fetch <원격저장소 별칭>
	예) git fetch hub

	
	git fetch 명령은 병합까지 하지는 않는다. 하지만 'git pull'명령을 쓰면 로컬을 기준으로 원격 저장소의 커밋을 가져와 병합한다.
	따라서 git fetch명령어로 커밋정보만 가져오고, 병합은 git merge명령어를 사용해 수동으로 진행하는 것이 안전하다.

	예) git merge hub/master

4. git pull: 원격저장소 내용을 로컬로 가져오기

	아래와 같이 하면 원격저장소의 내용을 내 master branch와 병합한다.

	$> git pull <원격저장소 별칭> master
	예) git pull hub master
